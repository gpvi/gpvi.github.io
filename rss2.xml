<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Niuzhuoqun&#39;s BLOG</title>
    <link>https://github.com//gpvi.github.io/</link>
    
    <atom:link href="https://github.com//gpvi.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>计算机探索ing</description>
    <pubDate>Wed, 06 Mar 2024 02:53:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>C++中sort的使用</title>
      <link>https://github.com//gpvi.github.io/2024/03/06/C-%E4%B8%ADsort%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <guid>https://github.com//gpvi.github.io/2024/03/06/C-%E4%B8%ADsort%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <pubDate>Wed, 06 Mar 2024 02:49:54 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;vector sort 使用笔记&lt;/h1&gt;
&lt;p&gt;#include &lt;iostream&gt;&lt;br&gt;
#include &lt;vector&gt;&lt;br&gt;
#include&lt;algorithm&gt;&lt;/p&gt;
&lt;p&gt;using namespace std;&lt;/p&gt;
&lt;p&gt;bool cmp(i</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>vector sort 使用笔记</h1><p>#include <iostream><br>#include <vector><br>#include<algorithm></p><p>using namespace std;</p><p>bool cmp(int x,int y)<br>{<br>return x &gt;y;<br>}<br>//sort默认为非降序排序<br>int main()<br>{<br>vector<int>a{2,5,1,4,6};<br>//正向排序<br>sort(a.begin(),a.end());<br>for(auto i:a)<br>{<br>cout&lt;&lt;i&lt;&lt;&quot; “;<br>}<br>cout&lt;&lt;endl;<br>//反向排序<br>sort(a.rbegin(),a.rend());<br>for(auto i:a)<br>{<br>cout&lt;&lt;i&lt;&lt;” &quot;;<br>}<br>cout&lt;&lt;endl;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带cmp参数的排序</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:a)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lambad</span></span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>(),[](<span class="type">int</span> a, <span class="type">int</span> b)-&gt; <span class="type">bool</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a&gt;b;</span><br><span class="line"><span class="comment">// 正序 return a&lt;b;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i:a)</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">sort</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://blog.csdn.net/weixin_43547900/article/details/121972917">https://blog.csdn.net/weixin_43547900/article/details/121972917</a></p>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/C/">C++</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/C-%E8%AF%AD%E6%B3%95/">C++语法</category>
      
      
      <comments>https://github.com//gpvi.github.io/2024/03/06/C-%E4%B8%ADsort%E7%9A%84%E4%BD%BF%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>H指数</title>
      <link>https://github.com//gpvi.github.io/2024/03/06/H%E6%8C%87%E6%95%B0/</link>
      <guid>https://github.com//gpvi.github.io/2024/03/06/H%E6%8C%87%E6%95%B0/</guid>
      <pubDate>Wed, 06 Mar 2024 02:29:24 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;H 指数&lt;/h1&gt;
&lt;p&gt;题目：&lt;/p&gt;
&lt;img src=&quot;/2024/03/06/H%E6%8C%87%E6%95%B0/image-20240306103207411.png&quot; class=&quot;&quot; title=&quot;image-20240306103207411&quot;&gt;
&lt;p</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>H 指数</h1><p>题目：</p><img src="/2024/03/06/H%E6%8C%87%E6%95%B0/image-20240306103207411.png" class="" title="image-20240306103207411"><p>思路：被引论文的引用次数&gt;=h 且 被引论文总数&gt;=h</p>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/">算法刷题笔记</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/leecode/">leecode</category>
      
      
      <comments>https://github.com//gpvi.github.io/2024/03/06/H%E6%8C%87%E6%95%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CPP实现简单线程池</title>
      <link>https://github.com//gpvi.github.io/2024/03/03/CPP%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <guid>https://github.com//gpvi.github.io/2024/03/03/CPP%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <pubDate>Sun, 03 Mar 2024 11:59:14 GMT</pubDate>
      
        
        
      <description>&lt;h2 id=&quot;C-简单实现线程池&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#C-简单实现线程池&quot;&gt;¶&lt;/a&gt;C++简单实现线程池&lt;/h2&gt;
&lt;h2 id=&quot;一、线程池简介&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、线程池简介&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<h2 id="C-简单实现线程池"><a class="header-anchor" href="#C-简单实现线程池">¶</a>C++简单实现线程池</h2><h2 id="一、线程池简介"><a class="header-anchor" href="#一、线程池简介">¶</a>一、线程池简介</h2><ol><li><p>什么是线程池</p><p>线程池主要是用来复用线程，减少线程的频繁创建与销毁。</p></li><li><p>线程池的优点</p><p>节省资源 吧</p></li></ol><h2 id="二、线程池的基本结构"><a class="header-anchor" href="#二、线程池的基本结构">¶</a>二、线程池的基本结构</h2><ol><li>线程池管理器，设置线程池参数，控制线程池的运行与停止。、</li><li>工作线程（Worker）初始化线程池是会有固定的线程存在与线程队列中并处于空闲状态。</li><li>一个线程队列 queue，线程队列的任务就是从任务队列中提取</li><li>一个缓冲任务队列 queue，其中存储的是任务（函数指针），此队列向外提供接口，能够让任务添加进来，同时保证并发安全（加互斥锁）。</li></ol><h2 id="三、运行过程"><a class="header-anchor" href="#三、运行过程">¶</a>三、运行过程</h2><ol><li>主程序当前没有任务要执行，线程池中的任务队列为空闲状态.</li><li>主程序添加小于等于线程池中线程数量的任务，任务缓冲队列为空。</li><li>主程序添加任务数量大于当前线程池中线程数量的任务，且多出来的任务小于缓冲队列的大小，缓存任务队列的任务等待执行。</li><li>主程序添加任务数量大于当前线程池中线程数量的任务,且任务缓冲队列已满.</li><li><strong>动态扩展线程池大小</strong>：在任务缓冲队列已满的情况下，可以尝试动态扩展线程池的大小，以容纳更多的任务。这样可以确保所有任务都能被处理，避免任务丢失。</li><li><strong>拒绝策略</strong>：当任务缓冲队列已满且无法动态扩展线程池大小时，可以采用一些拒绝策略来处理无法执行的任务。常见的拒绝策略包括：<ul><li><strong>抛出异常</strong>：直接抛出异常，通知调用者任务无法执行。</li><li><strong>丢弃最旧的任务</strong>：从任务缓冲队列中丢弃最早添加的任务，以腾出空间来执行新的任务。</li><li><strong>调用者运行</strong>：由调用线程直接执行该任务，而不放入任务队列中。</li></ul></li><li><strong>定时重试</strong>：将无法立即执行的任务重新放入任务队列中，并通过定时器定期重试执行这些任务，直到任务被成功执行为止。</li><li><strong>优先级队列</strong>：使用优先级队列管理任务，确保重要任务能够优先执行，可以避免一些次要任务占用队列空间。</li></ol><h2 id="四、具体实现部分"><a class="header-anchor" href="#四、具体实现部分">¶</a>四、具体实现部分</h2><ol><li>实现线程安全的队列，对队列的入队，出队操作加锁</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// safe_queue.h</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">queue&lt;T&gt; m_queue;<span class="comment">// 队列</span></span><br><span class="line">mutex m_mutex;<span class="comment">// 互斥锁</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SafeQueue</span>()&#123;&#125;</span><br><span class="line"><span class="built_in">SafeQueue</span>(SafeQueue &amp;&amp; other)&#123;&#125;</span><br><span class="line">    ~<span class="built_in">SafeQueue</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span></span>&#123;</span><br><span class="line">unique_lock &lt;mutex&gt; <span class="built_in">lock</span>(m_mutex);<span class="comment">// 检测是否可以访问</span></span><br><span class="line"><span class="keyword">return</span> m_queue.<span class="built_in">empty</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line">unique_lock &lt;mutex&gt; <span class="built_in">lock</span>(m_mutex);</span><br><span class="line"><span class="keyword">return</span> m_queue.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(T &amp;t)</span></span>&#123;</span><br><span class="line">unique_lock &lt;mutex&gt; <span class="built_in">lock</span>(m_mutex);</span><br><span class="line">m_queue.<span class="built_in">push</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">pop</span><span class="params">(T &amp;t)</span></span>&#123;</span><br><span class="line">unique_lock &lt;mutex&gt; <span class="built_in">lock</span>(m_mutex);</span><br><span class="line"><span class="keyword">if</span> (m_queue.<span class="built_in">empty</span>()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">t = <span class="built_in">move</span>(m_queue.<span class="built_in">front</span>());</span><br><span class="line">m_queue.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">bool</span> m_shutdown; <span class="comment">// 线程池是否关闭</span></span><br><span class="line">SafeQueue&lt;std::function&lt;<span class="type">void</span>()&gt;&gt; m_queue; <span class="comment">// 执行函数安全队列，即任务队列</span></span><br><span class="line">std::vector&lt;std::thread&gt; m_threads; <span class="comment">// 工作线程队列​</span></span><br><span class="line">std::mutex m_conditional_mutex; <span class="comment">// 线程休眠锁互斥变量</span></span><br><span class="line">std::condition_variable m_conditional_lock; <span class="comment">// 线程环境锁，可以让线程处于休眠或者唤醒状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"><span class="comment">// work_id</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_id;</span><br><span class="line"></span><br><span class="line">ThreadPool *m_pool;<span class="comment">//所属线程池指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Worker</span>(ThreadPool* pool, <span class="type">const</span> <span class="type">int</span> id): <span class="built_in">m_pool</span>(pool),<span class="built_in">m_id</span>(id) <span class="comment">// 构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*重载&#x27;()&#x27;运算符可以使对象具备函数调用的特性，增强了对象的可调用性和灵活性，使其适用于各种不同的场景和需求。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="comment">//一个不返回任何数值（void）且不接受任何参数的函数。在这个函数类型中，&#x27;void&#x27; 表示函数没有返回值，而 &#x27;()&#x27; 表示函数没有参数。</span></span><br><span class="line">function&lt;<span class="type">void</span>()&gt; func;</span><br><span class="line"><span class="type">bool</span> dequeued;<span class="comment">// 判断是否正在取出队列任务</span></span><br><span class="line"><span class="comment">// 从任务队列获取任务，需要加锁</span></span><br><span class="line"><span class="keyword">while</span>(!m_pool-&gt;m_shutdown)&#123;</span><br><span class="line">                <span class="comment">//加锁作用域</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">lock</span><span class="params">(m_pool-&gt;m_conditional_mutex)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(m_pool-&gt;m_queue.<span class="built_in">empty</span>())&#123;</span><br><span class="line"> m_pool-&gt;m_conditional_lock.<span class="built_in">wait</span>(lock); <span class="comment">// 等待条件变量通知，开启线程</span></span><br><span class="line">&#125;</span><br><span class="line">dequeued = m_pool-&gt;m_queue.<span class="built_in">pop</span>(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dequeued)&#123;</span><br><span class="line"><span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="type">const</span> <span class="type">int</span> n_threads = <span class="number">4</span>): <span class="built_in">m_threads</span>(std::<span class="built_in">vector</span>&lt;std::thread&gt;(n_threads)), <span class="built_in">m_shutdown</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 禁用了拷贝构造函数，防止通过拷贝构造函数创建 ThreadPool 类的对象的副本。</span></span><br><span class="line"><span class="built_in">ThreadPool</span>(<span class="type">const</span> ThreadPool &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="comment">// 禁用了移动构造函数，防止通过移动构造函数创建 ThreadPool 类的对象。</span></span><br><span class="line"><span class="built_in">ThreadPool</span>(ThreadPool &amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="comment">//禁用了拷贝赋值运算符，防止通过拷贝赋值运算符将一个 ThreadPool 对象赋值给另一个对象。</span></span><br><span class="line">ThreadPool &amp;<span class="keyword">operator</span>=(<span class="type">const</span> ThreadPool &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"><span class="comment">//禁用了移动赋值运算符，防止通过移动赋值运算符将一个 ThreadPool 对象赋值给另一个对象。</span></span><br><span class="line">ThreadPool &amp;<span class="keyword">operator</span>=(ThreadPool &amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i&lt;m_threads.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="comment">// 创建线程，传入线程池地址与workid</span></span><br><span class="line">m_threads.<span class="built_in">at</span>(i) = <span class="built_in">thread</span>(<span class="built_in">Worker</span>(<span class="keyword">this</span>,i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">m_shutdown = <span class="literal">true</span>;</span><br><span class="line">m_conditional_lock.<span class="built_in">notify_all</span>(); <span class="comment">// 通知，唤醒所有工作线程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m_threads.<span class="built_in">size</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_threads.<span class="built_in">at</span>(i).<span class="built_in">joinable</span>()) <span class="comment">// 判断线程是否在等待</span></span><br><span class="line">&#123;</span><br><span class="line">m_threads.<span class="built_in">at</span>(i).<span class="built_in">join</span>(); <span class="comment">// 将线程加入到等待队列</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> F,<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">submit</span><span class="params">(F &amp;&amp;f, Args &amp;&amp;...args)</span> -&gt; std::future&lt;<span class="title">decltype</span><span class="params">(f(args...))</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 调用打包</span></span><br><span class="line"><span class="comment">//function&lt;decltype(f(args...))()&gt; func = bind(forward&lt;F&gt;(f),forward&lt;Args&gt;(args));</span></span><br><span class="line">std::function&lt;<span class="keyword">decltype</span>(f(args...))()&gt; func = std::<span class="built_in">bind</span>(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...);</span><br><span class="line"><span class="comment">//std::packaged_task可以用来封装任何可以调用的目标，从而用于实现异步的调用。</span></span><br><span class="line"><span class="comment">//使用std::make_shared&lt;&gt;()方法，声明了一个std::packaged_task&lt;decltype(f(args...))()&gt;类型的智能指针</span></span><br><span class="line"><span class="keyword">auto</span> task_ptr = make_shared&lt;packaged_task&lt;<span class="keyword">decltype</span>(<span class="built_in">f</span>(args...))()&gt;&gt;(func);</span><br><span class="line">std::function&lt;<span class="type">void</span>()&gt; warpper_func = [task_ptr]()</span><br><span class="line">&#123;</span><br><span class="line">(*task_ptr)();</span><br><span class="line">&#125;;</span><br><span class="line">   <span class="comment">// 队列通用安全封包函数，并压入安全队列</span></span><br><span class="line">m_queue.<span class="built_in">push</span>(warpper_func);</span><br><span class="line"><span class="comment">// 唤醒一个等待中的线程</span></span><br><span class="line">m_conditional_lock.<span class="built_in">notify_one</span>();</span><br><span class="line"><span class="comment">// 返回先前注册的任务指针</span></span><br><span class="line"><span class="keyword">return</span> task_ptr-&gt;<span class="built_in">get_future</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;ThreadPool.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">random_device rd;</span><br><span class="line"><span class="function">mt19937 <span class="title">mt</span><span class="params">(rd())</span></span>;</span><br><span class="line"><span class="function">uniform_int_distribution&lt;<span class="type">int</span>&gt; <span class="title">dist</span><span class="params">(<span class="number">-1000</span>, <span class="number">1000</span>)</span></span>; <span class="comment">// 均匀分布的整数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> rnd = <span class="built_in">bind</span>(dist,mt);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置线程睡眠时间</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">simulate_hard_computation</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">this_thread::<span class="built_in">sleep_for</span>(chrono::<span class="built_in">milliseconds</span>(<span class="number">2000</span> + <span class="built_in">rnd</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加两个数字的简单函数并打印结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">multiply</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">simulate_hard_computation</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> res = a * b;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加并输出结果</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">multiply_output</span><span class="params">(<span class="type">int</span> &amp;out, <span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">simulate_hard_computation</span>();</span><br><span class="line">out = a * b;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; out &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果返回</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">multiply_return</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a, <span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">simulate_hard_computation</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> res = a * b;</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; b &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">example</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ThreadPool <span class="title">pool</span><span class="params">(<span class="number">3</span>)</span></span>;</span><br><span class="line">pool.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">9</span>;j++)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">pool.<span class="built_in">submit</span>(multiply,i,j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用ref传递的输出参数提交函数</span></span><br><span class="line"><span class="type">int</span> output_ref;</span><br><span class="line"><span class="keyword">auto</span> future1 = pool.<span class="built_in">submit</span>(multiply_output, std::<span class="built_in">ref</span>(output_ref), <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待乘法输出完成</span></span><br><span class="line">future1.<span class="built_in">get</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Last operation result is equals to &quot;</span> &lt;&lt; output_ref &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用return参数提交函数</span></span><br><span class="line"><span class="keyword">auto</span> future2 = pool.<span class="built_in">submit</span>(multiply_return, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待乘法输出完成</span></span><br><span class="line"><span class="type">int</span> res = future2.<span class="built_in">get</span>();</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Last operation result is equals to &quot;</span> &lt;&lt; res &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭线程池</span></span><br><span class="line">pool.<span class="built_in">shutdown</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">example</span>();</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.cnblogs.com/ailumiyana/p/10016965.html">基于C++11实现线程池的工作原理 - 靑い空゛ - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/lzpong/p/6397997.html">基于C++11的线程池(threadpool),简洁且可以带任意多的参数 - _Ong - 博客园 (cnblogs.com)</a></p><p><a href="https://segmentfault.com/a/1190000022456590">C<ins>11实现的 100行线程池 解析 - C</ins> 无所不能 - SegmentFault 思否</a></p>]]></content:encoded>
      
      
      
      
      <comments>https://github.com//gpvi.github.io/2024/03/03/CPP%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>设计模式（一）</title>
      <link>https://github.com//gpvi.github.io/2024/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</link>
      <guid>https://github.com//gpvi.github.io/2024/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/</guid>
      <pubDate>Tue, 06 Feb 2024 07:33:55 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;设计模式入门&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;将无变化与有变化的部分分开&lt;/li&gt;
&lt;/ul&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>设计模式入门</h1><ul><li>将无变化与有变化的部分分开</li></ul>]]></content:encoded>
      
      
      
      
      <comments>https://github.com//gpvi.github.io/2024/02/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E4%B8%80%EF%BC%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>现代操作系统笔记</title>
      <link>https://github.com//gpvi.github.io/2023/10/26/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</link>
      <guid>https://github.com//gpvi.github.io/2023/10/26/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/</guid>
      <pubDate>Thu, 26 Oct 2023 07:18:09 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;进程与线程&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#进程与线程&quot;&gt;¶&lt;/a&gt;进程与线程&lt;/h3&gt;
&lt;h3 id=&quot;进程模型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#进程模型&quot;&gt;¶&lt;/a&gt;进程模型&lt;/h3&gt;
&lt;p&gt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="进程与线程"><a class="header-anchor" href="#进程与线程">¶</a>进程与线程</h3><h3 id="进程模型"><a class="header-anchor" href="#进程模型">¶</a>进程模型</h3><p>1、每个进程有自己的虚拟CPU，真正执行时时来回切换进程（多道程序设计）。<br>2、每个进程都有自己的程序计数器，运行时将程序计数器装入实际的计数器。运行结束时将物理程序计数器保存到内存中的逻辑计数器。</p><h2 id="进程的创建"><a class="header-anchor" href="#进程的创建">¶</a>进程的创建</h2><h3 id="导致进程创建的事件"><a class="header-anchor" href="#导致进程创建的事件">¶</a>导致进程创建的事件</h3><ul><li>系统初始化 前台进程和后台进程（停留在后台处理诸如电子邮件、 Web页面 新闻 印之类活动的进程称为<strong>守护进程</strong> ）unix可以用ps命令查看进程</li><li>系统调用</li><li>用户请求创建新进程</li><li>批处理作业的初始化</li></ul><h3 id="进程的终止"><a class="header-anchor" href="#进程的终止">¶</a>进程的终止</h3><ul><li>正常退出</li><li>出错推出</li><li>严重错误</li><li>被其他进程杀死</li></ul>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">操作系统</category>
      
      
      <comments>https://github.com//gpvi.github.io/2023/10/26/%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>快排算法</title>
      <link>https://github.com//gpvi.github.io/2023/10/23/%E5%BF%AB%E6%8E%92%E7%AE%97%E6%B3%95/</link>
      <guid>https://github.com//gpvi.github.io/2023/10/23/%E5%BF%AB%E6%8E%92%E7%AE%97%E6%B3%95/</guid>
      <pubDate>Mon, 23 Oct 2023 09:36:27 GMT</pubDate>
      
        
        
      <description>&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">qs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;nums,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left&gt;=right) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pivot_index = (left+right)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> pivot = nums[pivot_index];</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> j = right;</span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line"><span class="keyword">while</span>(nums[i]&lt;pivot)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(nums[j]&gt;pivot)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">swap</span>(nums[i],nums[j]);</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qs</span>(nums,left,j);</span><br><span class="line"><span class="built_in">qs</span>(nums,i,right);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;num,<span class="type">int</span> left,<span class="type">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left&gt;= right) <span class="keyword">return</span> ;</span><br><span class="line"><span class="comment">// partion</span></span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="type">int</span> index = <span class="built_in">rand</span>()%(right-left);</span><br><span class="line">index += left;</span><br><span class="line"><span class="type">int</span> target_num = num[index];</span><br><span class="line"><span class="type">int</span> i = left;</span><br><span class="line"><span class="type">int</span> j = left;</span><br><span class="line"><span class="type">int</span> k = right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i&lt;k)&#123;</span><br><span class="line"><span class="comment">//TODO</span></span><br><span class="line"><span class="keyword">if</span>(num[i]&gt;target_num)&#123;</span><br><span class="line"><span class="built_in">swap</span>(num[i],num[--k]);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(num[i]&lt;target_num)&#123;</span><br><span class="line"><span class="built_in">swap</span>(num[i++],num[j++]);</span><br><span class="line">&#125;<span class="keyword">else</span> i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">quick_sort</span>(num,left,j);</span><br><span class="line"><span class="built_in">quick_sort</span>(num,k,right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">nums.<span class="built_in">push_back</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">qs</span>(nums,<span class="number">0</span>,nums.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">算法与数据结构</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/%E7%AE%97%E6%B3%95/">算法</category>
      
      
      <comments>https://github.com//gpvi.github.io/2023/10/23/%E5%BF%AB%E6%8E%92%E7%AE%97%E6%B3%95/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>红黑树.md</title>
      <link>https://github.com//gpvi.github.io/2023/10/23/%E7%BA%A2%E9%BB%91%E6%A0%91/</link>
      <guid>https://github.com//gpvi.github.io/2023/10/23/%E7%BA%A2%E9%BB%91%E6%A0%91/</guid>
      <pubDate>Mon, 23 Oct 2023 06:24:15 GMT</pubDate>
      
        
        
      <description>&lt;h1&gt;红黑树学习&lt;/h1&gt;
&lt;h2 id=&quot;红黑树的结构&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#红黑树的结构&quot;&gt;¶&lt;/a&gt;红黑树的结构&lt;/h2&gt;
&lt;h2 id=&quot;红黑树的旋转&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#红黑树的</description>
        
      
      
      
      <content:encoded><![CDATA[<h1>红黑树学习</h1><h2 id="红黑树的结构"><a class="header-anchor" href="#红黑树的结构">¶</a>红黑树的结构</h2><h2 id="红黑树的旋转"><a class="header-anchor" href="#红黑树的旋转">¶</a>红黑树的旋转</h2><h2 id="红黑树的插入"><a class="header-anchor" href="#红黑树的插入">¶</a>红黑树的插入</h2><h2 id="红黑树的删除"><a class="header-anchor" href="#红黑树的删除">¶</a>红黑树的删除</h2>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/ds/">ds</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">算法与数据结构</category>
      
      
      <comments>https://github.com//gpvi.github.io/2023/10/23/%E7%BA%A2%E9%BB%91%E6%A0%91/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>root远程登陆ubuntu</title>
      <link>https://github.com//gpvi.github.io/2023/10/04/root%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86ubuntu/</link>
      <guid>https://github.com//gpvi.github.io/2023/10/04/root%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86ubuntu/</guid>
      <pubDate>Wed, 04 Oct 2023 14:40:38 GMT</pubDate>
      
        
        
      <description>&lt;h3 id=&quot;远程登陆&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#远程登陆&quot;&gt;¶&lt;/a&gt;远程登陆&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装SSH（本机和服务器都要安装）&lt;/li&gt;
&lt;li&gt;在本机生成密钥，win10公钥位置在  用户名/.ssh/id_rsa.p</description>
        
      
      
      
      <content:encoded><![CDATA[<h3 id="远程登陆"><a class="header-anchor" href="#远程登陆">¶</a>远程登陆</h3><ol><li>安装SSH（本机和服务器都要安装）</li><li>在本机生成密钥，win10公钥位置在  用户名/.ssh/id_rsa.pub</li><li>将公钥copy到服务器上存储公钥的目录下。</li><li>设置服务器事情能够通过密钥登录。</li></ol>]]></content:encoded>
      
      
      <category domain="https://github.com//gpvi.github.io/categories/CS/">CS</category>
      
      
      <category domain="https://github.com//gpvi.github.io/tags/%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0/">工具学习</category>
      
      
      <comments>https://github.com//gpvi.github.io/2023/10/04/root%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86ubuntu/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
